
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'


android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "com.lenta.inventory"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode getCodeVersion()
        versionName getNameVersion()
        println 'version:' + getNameVersion()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.all {
                def name = outputFileName.replace("app-", "LentaWriteOff-")
                outputFileName = name.replace(".apk", "-${variant.versionName}-${variant.versionCode}.apk")
            }
        }
    }

    packagingOptions {
        pickFirst 'META-INF/kotlinx-io.kotlin_module'
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/kotlinx-coroutines-io.kotlin_module'
    }

}

dependencies {
    implementation project(':Shared')
    implementation 'com.android.support:multidex:1.0.3'
    testImplementation "junit:junit:4.12"

    // Dagger2
    kapt deps.dagger.compiler

    testImplementation deps.junit
    /*androidTestImplementation 'androidx.test:runner:1.2.0-alpha03'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-alpha03'*/

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }



}

// Returns last tag on current branch
String getLastTag() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        logger.error('getLastTag() error, ' + ignored)
        return null
    }
}

// Returns commits' count since tag
def gitCommitsSinceTag(tag) {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            //                             master - remote branch
            commandLine 'git', 'rev-list', 'HEAD', '--count', "${tag}...HEAD"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        logger.error('gitCommitsSinceTag() error, ' + ignored);
        return null
    }
}


def getCodeVersion() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', 'HEAD', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return 1
    }
}

String getNameVersion() {
    String lastTag = getLastTag()
    if (lastTag == null) {
        return "10.0." + getCodeVersion()
    }
    return lastTag + "." + gitCommitsSinceTag(lastTag)
}
